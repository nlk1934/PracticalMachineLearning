shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
runApp("C:\\Users\\karibuDell\\Desktop\\_temp")
runApp("C:\\Users\\karibuDell\\Desktop\\_temp")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='karibu', token='0E49734E51737B93EE2A9EA5B2709631', secret='mpE1ccaHqdBhnARBkCzvY/UBuHucEjDWFdbdzGzH')
library(shinyapps)
shinyapps::deployApp('"C:\\Users\\karibuDell\\Desktop\\_temp')
shinyapps::deployApp('C:\\Users\\karibuDell\\Desktop\\_temp')
library(shiny)
appwd <- 'C:\\Users\\karibuDell\\Desktop\\_temp'
runApp(appwd, display.mode = "showcase")
runApp(appwd, display.mode = "showcase")
runApp(appwd)
runApp(appwd)
runApp(appwd)
runApp(appwd)
runApp(appwd)
runApp(appwd)
runApp(appwd)
library(shiny)
runApp(appwd)
runApp(appwd)
runApp(appwd)
str(mtcars)
runApp(appwd)
library(shinyapps)
appwd <- 'C:\\Users\\karibuDell\\Desktop\\project\\myShiny'
runApp(appwd)
require(data.table)
library(data.table)
install.packages("data.table")
install.packages('sqldf')
runApp(appwd)
install.packages("caret",  dependencies  =  c("Depends",  "Suggests"))
library(caret)
library(mlbench)
install.packages('radleyTerry2')
library(caret)
Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
library(caret)
sessionInfo()
Sys.setlocale(category = "LC_ALL", locale = "en_us")
Sys.setlocale(category = "LC_ALL", "en_US.UTF-8")
Sys.setlocale(locale = "English")
library(caret)
library(caret)
install.packages('BradleyTerry2')
library(caret)
data(Sonar)
head(Sonar)
names(Sonar)
table(Sonar$Class)
set.seed(107)
inTrain  <-  createDataPartition(y  =  Sonar$Class,
+ ##  the  outcome  data  are  needed
+ p  =  .75,
+ ##  The  percentage  of  data  in  the
+ ##  training  set
+ list  =  FALSE)
inTrain  <-  createDataPartition(y  =  Sonar$Class,
##  the  outcome  data  are  needed
p  =  .75,
##  The  percentage  of  data  in  the
##  training  set
list  =  FALSE)
str(inTrain)
inTrain
testing    <-  Sonar[-inTrain,]
training  <-  Sonar[  inTrain,]
nrow(training)
nrow(testing)
plsFit  <-  train(Class  ~  .,
data  =  training,
method  =  "pls",
##  Center  and  scale  the  predictors  for  the  training
##  set  and  all  future  samples.
preProc  =  c("center",  "scale"))
plsFit
ctrl  <-  trainControl(method  =  "repeatedcv",
repeats  =  3,
classProbs  =  TRUE,
summaryFunction  =  twoClassSummary)
plsFit  <-  train(Class  ~  .,
data  =  training,
method  =  "pls",
tuneLength  =  15,
trControl  =  ctrl,
metric  =  "ROC",
preProc  =  c("center",  "scale"))
plsFit
plsClasses  <-  predict(plsFit,  newdata  =  testing)
str(plsClasses)
plsProbs  <-  predict(plsFit,  newdata  =  testing,  type  =  "prob")
head(plsProbs)
confusionMatrix(data  =  plsClasses,  testing$Class)
library(caret)
set.seed(999)
cwd <- 'C:\\Users\\karibuDell\\Desktop\\project\\PracticalMachineLearning'
setwd(cwd)
dat <- read.csv('data\pml-training.csv')
dat <- read.csv('data\\pml-training.csv')
names(dat)
inTraining <- createDataPartition(Sonar$Classe, p = .75, list = FALSE)
str(dat$Classe)
str(dat$classe)
inTraining <- createDataPartition(dat$classe, p = .75, list = FALSE)
training <- dat[ inTraining,]
testing  <- dat[-inTraining,]
dim(dat)
nzv <- nearZeroVar(dat)
nzv[nzv$nzv,][1:10,]
nzv
dat[nzv]
dim(dat)
nzv <- nearZeroVar(dat)
dat <- dat[, -nzv]
dim(dat)
highlyCorDescr <- findCorrelation(dat, cutoff = .75)
names(dat)
str(dat)
cor(dat)
new_df <- dat[sapply(dat,is.numeric)]
str(new_df)
highlyCorDescr <- findCorrelation(dat[sapply(dat,is.numeric)], cutoff = .75)
highlyCorDescr <- findCorrelation(new_df, cutoff = .75)
cor(new_df)
nna.omit(new_df)
na.omit(new_df)
cor(na.omit(new_df))
new_df <- na.omit(dat[sapply(dat,is.numeric)])
highlyCorDescr <- findCorrelation(new_df, cutoff = .75)
descrCor <- cor(dat)
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
descrCor <- cor(dat)
descrCor <- cor(na.omit(dat[sapply(dat,is.numeric)]))
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
dim(dat)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
highlyCorDescr
dat <- dat[,-highlyCorDescr]
dim(dat)
dim(dat) # 60 near zero variables were removed from 160 predictors
descrCor <- cor(na.omit(dat[sapply(dat,is.numeric)]))
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
dat <- dat[,-highlyCorDescr]
dim(dat)
descrCor <- cor(na.omit(dat[sapply(dat,is.numeric)]))
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
dat <- dat[,-highlyCorDescr]
dim(dat)
dat <- read.csv('data\\pml-training.csv')
dim(dat)
nzv <- nearZeroVar(dat)
dat <- dat[, -nzv]
dim(dat) # 60 near zero variables were removed from 160 predictors
descrCor <- cor(na.omit(dat[sapply(dat,is.numeric)]))
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
dat <- dat[,-highlyCorDescr]
dim(dat)
highlyCorDescr
dat <- read.csv('data\\pml-training.csv')
origin <-dat
nzv <- nearZeroVar(dat)
dat <- dat[, -nzv]
dim(dat)
descrCor <- cor(dat)
descrCor <- cor(na.omit(dat[sapply(dat,is.numeric)]))
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .80)
highlyCorDescr
length(highlyCorDescr)
names(dat[highlyCorDescr])
numdata <- na.omit(dat[sapply(dat,is.numeric)])
numdata(dat[highlyCorDescr])
numdata[highlyCorDescr]
names(numdata[highlyCorDescr])
dat[, -names(numdata[highlyCorDescr])]
sub <- subset(dat, select=-names(numdata[highlyCorDescr]))
sub <- subset(dat, select=-names(numdata[highlyCorDescr])  )
sub <- dat[ , -which(names(df) %in% names(numdata[highlyCorDescr])]
numdat <- as.numeric(dat)
numdat <- na.omit(dat[sapply(dat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .80)
highlyCorCol <- colnames(numdat[,highlyCorDescr])
highlyCorCol
newdat <- dat[,--which(colnames(dat) %in% highlyCorCol)]
dim(dat)
dim(newdat)
dim(highlyCorCol)
length(highlyCorCol)
newdat <- dat[,-which(colnames(dat) %in% highlyCorCol)]
dim(newdat)
numdat <- na.omit(dat[sapply(newdat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
numdat <- na.omit(dat[sapply(newdat,is.numeric)])
descrCor <- cor(numdat)
names(newdat)
head(newdat,1:3)
head(newdat[1:3])
cor(dat)
dat$x <- as.numeric(dat$x)
numdat <- na.omit(dat[sapply(dat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
summary(newdat)
numdat <- na.omit(dat[sapply(newdat,is.numeric)])
str(numdat)
descrCor <- cor(numdat)
newdat <- dat[,-which(colnames(dat) %in% highlyCorCol)]
dim(newdat)
dim(dat)
str(dat)
str(numdat)
cwd <- 'C:\\Users\\karibuDell\\Desktop\\project\\PracticalMachineLearning'
setwd(cwd)
dat <- read.csv('data\\pml-training.csv')
#https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
#https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
names(dat)
str(dat$classe)
str(dat)
#remove Zero- and Near Zero-Variance Predictors
dim(dat)
nzv <- nearZeroVar(dat)
dat <- dat[, -nzv]
dim(dat) # 60 near zero variables were removed from 160 predictors
#Identifyi and Remove Correlated Predictors Zero- and Near Zero-Variance Predictors
numdat <- na.omit(dat[sapply(dat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .80)
highlyCorCol <- colnames(numdat[,highlyCorDescr])
newdat <- dat[,-which(colnames(dat) %in% highlyCorCol)]
dim(dat)
dim(newdat)
numdat <- na.omit(dat[sapply(newdat,is.numeric)])
dim(numdat)
cor(numdat)
numdat <- na.omit(newdat[sapply(newdat,is.numeric)])
cor(numdat)
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
dim(dat) # 60 near zero variables were removed from 160 predictors
numdat <- na.omit(dat[sapply(dat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
highlyCorCol <- colnames(numdat[,highlyCorDescr])
newdat <- dat[,-which(colnames(dat) %in% highlyCorCol)]
dim(newdat)
numdat <- (dat[sapply(dat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
numdat <- na.omit(dat[sapply(dat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
highlyCorCol <- colnames(numdat[,highlyCorDescr])
newdat <- dat[,-which(colnames(dat) %in% highlyCorCol)]
dim(newdat)
numdat <- na.omit(newdat[sapply(newdat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
numdat <- na.omit(dat[sapply(dat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
highlyCorCol <- colnames(numdat[,highlyCorDescr])
dat <- dat[,-which(colnames(dat) %in% highlyCorCol)]
dim(dat)
set.seed(2015)
cwd <- 'C:\\Users\\karibuDell\\Desktop\\project\\PracticalMachineLearning'
setwd(cwd)
dat <- read.csv('data\\pml-training.csv')
#https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
#https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
names(dat)
str(dat$classe)
str(dat)
#remove Zero- and Near Zero-Variance Predictors
dim(dat)
nzv <- nearZeroVar(dat)
dat <- dat[, -nzv]
dim(dat) # 60 near zero variables were removed from 160 predictors
#Identifyi and Remove Correlated Predictors
numdat <- na.omit(dat[sapply(dat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
highlyCorCol <- colnames(numdat[,highlyCorDescr])
dat <- dat[,-which(colnames(dat) %in% highlyCorCol)]
dim(dat)
inTraining <- createDataPartition(dat$classe, p = .75, list = FALSE)
training <- dat[ inTraining,]
testing  <- dat[-inTraining,]
inTraining <- createDataPartition(dat$classe, p = .75, list = FALSE)
training <- dat[ inTraining,]
testing  <- dat[-inTraining,]
testing
head(inTraining)
gbmFit1 <- train(Class ~ ., data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFit1
gbmFit1 <- train(Classe ~ ., data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFit1
gbmFit1 <- train(classe ~ ., data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFit1
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
gbmFit1 <- train(classe ~ ., data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFit1
glmFit <- train(classe ~ ., data = training,
method = "glm",
trControl = fitControl,
verbose = FALSE)
glmFit #Accuracy is 0.9972759
rfFit <- train(classe ~ ., data = training,
method = "rf",
trControl = fitControl,
verbose = FALSE)
rfFit #Accuracy is 0.9972759
glmFit <- train(classe ~ ., data = training,
method = "glm",
trControl = fitControl,
verbose = FALSE)
warning()
glmFit <- train(classe ~ ., data = training,
method = "glm")
numTraining <- na.omit(training[sapply(training,is.numeric)])
predictions <- predict(gbmFit, testing)
predictions <- predict(gbmFit, newdata=testing)
gbmFit <- train(classe ~ ., data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFit #Accuracy is 0.9972759
predictions <- predict(gbmFit, newdata=testing)
table(predictTr, training$classe)
table(predictions, training$classe)
table(predictions, testing$classe)
str(predictions)
str(testing$classe)
table(predictions, testing$classe)
confusionMatrix(predictions, testing$classe)
length(testing$classe)
length(predictions)
dim(testing)
dim(na.omit(testing))
confusionMatrix(predictions, na.omit(testing$classe))
confusionMatrix(predictions, na.omit(testing)$classe)
predictions <- predict(rfFit, newdata=testing)
confusionMatrix(predictions, na.omit(testing)$classe)
finalTesting <- read.csv('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv')
predictions <- predict(rfFit, newdata=finalTesting)
str(finalTesting$roll_belt)
str(Testing$roll_belt)
str(dat$roll_belt)
dat <- read.csv('data\\pml-training.csv')
str(dat$roll_belt)
finalTesting <- finalTesting[,which(colnames(finalTesting) %in% colnames(dat)]
finalTesting <- finalTesting[,colnames(dat)]
finalTesting <- finalTesting[,which(colnames(finalTesting) %in% colnames(dat))]
predictions <- predict(rfFit, newdata=finalTesting)
finalTesting <- read.csv('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv')
str(dat$var_roll_belt)
str(finalTesting$var_roll_belt)
str(finalTesting)
final <-  na.omit(finalTesting[sapply(finalTesting,is.numeric)])
str(final)
predictions <- predict(rfFit, newdata=final)
final <-  finalTesting[,colnames(training)]
colnames(training)
predictions <- predict(rfFit, newdata=final)
finalTesting["var_roll_belt"]
head(testing["var_roll_belt"])
numdat <- (dat[sapply(dat,is.numeric)])
descrCor <- cor(numdat)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
dim(dat)
?rowSums
nadat <- is.na(dat)
colSums(nadat)
str(colSums(nadat))
unique(colSums(nadat))
M[!rowSums(is.na(M[ , 1:5])) == 5, ]
names(dat[colSums(is.na(dat)) == 0])
names(dat[-colSums(is.na(dat)) == length(dat)])
names(dat[,-colSums(is.na(dat)) == length(dat)])
names(dat[colSums(is.na(dat)) == length(dat)])
names(dat[colSums(is.na(dat)) == 0])
unique(colSums(nadat))
names(dat[colSums(is.na(dat)) == 19216])
names(dat[-colSums(is.na(dat)) == 19216])
names(dat[-(colSums(is.na(dat)) == 19216])
names(dat[colSums(is.na(dat)) == 19216])
names(dat[colSums(is.na(dat)) == length(dat)])
length(dat)
names(dat[colSums(is.na(dat)) == nrow(dat)])
nrow(dat)
names(dat[colSums(is.na(dat)) > 0.8*nrow(dat)])
0.8*nrow(dat)
names(dat[colSums(is.na(dat)) == 19216])
dat <- read.csv('data\\pml-training.csv')
dim(dat)
dim(dat)
names(dat[colSums(is.na(dat)) > 0.8*nrow(dat)])
dat <- dat[colSums(is.na(dat)) > 0.8*nrow(dat)]
dim(dat) #19622 rows   160 variavbles
nzv <- nearZeroVar(dat)
dat <- dat[, -nzv]
dim(dat) # 60 near zero variables were removed from 160 predictors
cor(dat)
descrCor <- cor(dat)
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
head(dat, 3)
dat <- read.csv('data\\pml-training.csv')
dim(dat) #19622 rows   160 variavbles
newdat <- dat[colSums(is.na(dat)) > 0.8*nrow(dat)]  #67 variavbles
View(newdat)
newdat <- dat[colSums(is.na(dat)) < 0.8*nrow(dat)]  #67 variavbles
View(newdat)
newdat <- dat[colSums(is.na(dat)) < 0.2*nrow(dat)]  #67 variavbles
dim(dat) #19622 rows   160 variavbles
dim(newdat) #19622 rows   160 variavbles
dat <- dat[colSums(is.na(dat)) < 0.2*nrow(dat)]  #67 variavbles
nzv <- nearZeroVar(dat)
dat <- dat[, -nzv] #41 variavbles
dim(dat) #19622 rows   160 variavbles
fix(dat)
dat <- read.csv('data\\pml-training.csv')
dim(dat) #19622 rows   160 variavbles
dat <- dat[colSums(is.na(dat)) < 0.8*nrow(dat)]  #93 variavbles
nzv <- nearZeroVar(dat)
dat <- dat[, -nzv] #59 variavbles
dim(dat) #19622 rows   160 variavbles
descrCor <- cor(dat)
str(x)
str(dat$x)
summary(dat$x)
names(dat)
str(dat)
(dat$x)
str(dat$X)
(dat$x) <- as.numeric(dat$XX)
(dat$x) <- as.numeric(dat$X)
dat$x <- as.numeric(dat$X)
descrCor <- cor(dat)
dat$X <- as.numeric(dat$X)
descrCor <- cor(dat)
cor(dat[sapply(dat, is.numeric)])
dat <- read.csv('data\\pml-training.csv')
#https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
#https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
#remove Most-NA, Zero- and Near Zero-Variance Predictors
dim(dat) #19622 rows   160 variavbles
dat <- dat[colSums(is.na(dat)) < 0.8*nrow(dat)]  #93 variavbles
nzv <- nearZeroVar(dat)
dat <- dat[, -nzv] #59 variavbles
#Identifyi and Remove Correlated Predictors
descrCor <- cor(dat[sapply(dat, is.numeric)])
summary(descrCor[upper.tri(descrCor)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
dat <- dat[, -highlyCorDescr]
dim(dat)
inTraining <- createDataPartition(dat$classe, p = .75, list = FALSE)
training <- dat[ inTraining,]
testing  <- dat[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
gbmFit <- train(classe ~ ., data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE)
